#!/usr/bin/env python

import os
import sys
import math

import numpy as np
import matplotlib as mpl
mpl.use('agg')

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib as mpl
#import matplotlib.transforms
#import matplotlib.rc as rc
import pylab as pl

import subprocess

from hagfishUtils import *

## Arguments: General options 
parser = getHagfishOptparser()
addPlotParameters(parser)
parser.remove_option('-Y')
parser.remove_option('--ymax')
parser.remove_option('-Q')

options, args = parser.parse_args()

options.ymax = 2
options.bandHeight=20

l = getLogger('main', options.verbose)

l.info("starting %s" % sys.argv[0])
    
#load the coverage plots
data = hagfishData(options, args)

#prepare the plot
plot = hagfishPlot(options, data, tag='block')

class plotter(hagfishPlotBand):
    
    def plotBand(self):
        self.l.debug("Start plotting")
        yc = self.yCorrection

        #score = np.exp(-0.01 * (self.low + self.high)) - np.exp(-0.01 * self.ok)
        score = 1 - 2 * np.exp(-1 * (self.ok / self.data.median)) \
                + np.exp(-1 * ((self.ok + self.low + self.high)/self.data.median))

        self.l.debug("score min %s max %s" % (np.min(score), np.max(score)))

        spacer = (self.bandTop - self.bandBottom) / 20.0
        
        self.plot.lastBar = self.ax.imshow(
            [score],
            cmap=COLMAP1,
            aspect='auto',
            interpolation='bilinear',
            vmin=-1, vmax=1,
            origin='lower',
            extent=[0 , len(self.locx),
                    self.bandBottom + spacer, self.bandTop]
            )

        if self.__dict__.has_key('nns'):
            self.l.info("plotting N band")
            self.l.info("maxY %s" % self.plot.maxY)
            self.l.info("max min nns %s %s " % (np.max(self.nns), np.min(self.nns)))
            self.l.info("bandbot, bandtop %s %s " % (self.bandBottom, self.bandTop))


            self.ax.fill_between(
                self.locx,
                yc + (self.plot.maxY * self.nns * 0.25),
                yc - (self.plot.maxY * self.nns * 0.25),
                linewidth=0, zorder=220,
                color=COLLIGHTYELLOW)

        
    def setYticks2(self):
        pass

plot.plotBands(plotter)
#l.info("attempt colorbar")

plt.subplots_adjust(left=0.01, right=0.99, top=0.99, bottom=0.01)

#cbax = plot.add_axes((0.8,0.1,0.2, 0.9)
l.info('plotting colorbar')
plt.colorbar(plot.lastBar, ax=plot.ax, orientation="vertical", format="%s",
             ticks=[1, 0, -1], pad = 0.05, fraction=0.05, aspect=10,
             )

plot.save()

 
