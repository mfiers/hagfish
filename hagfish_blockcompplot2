#!/usr/bin/env python

import os
import sys
import math

import numpy as np
import matplotlib as mpl
mpl.use('agg')
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib as mpl
#import matplotlib.transforms
#import matplotlib.rc as rc
import pylab as pl

import subprocess

from hagfishUtils import *

## Arguments: General options 
parser = getHagfishOptparser()
addPlotParameters(parser)
parser.remove_option('-Y')
parser.remove_option('--ymax')
parser.remove_option('-Q')
parser.add_option('-L', dest='library2', action='append',
                  help='Library to compare to')

options, args = parser.parse_args()

options.ymax = 2
options.bandHeight=20

l = getLogger('main', options.verbose)

l.info("starting %s" % sys.argv[0])
    
seqId = args[0]


#load the coverage plots
data = hagfishData(options, args)
data2 = hagfishData(options, args, libraries=options.library2)

title1 = "_".join(options.library)
title2 = "_".join(options.library2)

#prepare the plot
plot = hagfishPlot(options, data, data2=data2, tag='blockcomp')

class plotter(hagfishPlotBand):
    
    def plotBand(self):
        self.l.debug("Start plotting")
        yc = self.yCorrection

        median1 = self.data.median
        median2 = self.data2.median

        #score = np.exp(-0.01 * (self.low + self.high)) - np.exp(-0.01 * self.ok)
        score1 = 1 - 2 * np.exp(-1 * (self.d1.ok / median1)) \
            + np.exp(-1 * ( ( self.d1.ok + self.d1.low + self.d1.high) / median1))
                

        score2 = 1 - 2 * np.exp(-1 * (self.d2.ok / median2)) \
            + np.exp(-1 * ( ( self.d2.ok + self.d2.low + self.d2.high) / median2))

        score = score1 - score2

        self.l.debug("score min %s max %s" % (np.min(score), np.max(score)))

        spacer = (self.bandTop - self.bandBottom) / 20.0
        self.plot.lastBar = self.ax.imshow(
            [score],
            cmap=COLMAP2,
            aspect='auto',
            interpolation='bilinear',
            vmin=-1, vmax=1,
            origin='lower',
            extent=[0 , len(self.locx),
                    self.bandBottom + spacer, self.bandTop]
            )


        if self.__dict__.has_key('nns'):
            self.l.info("plotting N band")
            self.l.info("maxY %s" % self.plot.maxY)
            self.l.info("max min nns %s %s " % (np.max(self.nns), np.min(self.nns)))
            self.l.info("bandbot, bandtop %s %s " % (self.bandBottom, self.bandTop))


            self.ax.fill_between(
                self.locx,
                yc + (self.plot.maxY * self.nns * 0.25),
                yc - (self.plot.maxY * self.nns * 0.25),
                linewidth=0, zorder=220,
                color=COLLIGHTYELLOW)

        
    def setYticks2(self):
        pass

plot.plotBands(plotter)
#l.info("attempt colorbar")
cb = plt.colorbar(plot.lastBar, ax=plot.ax, orientation="horizontal", format="%s",
             ticks=[1, 0, -1], aspect=100,
                  
             pad=0.3 )

cb.set_ticklabels(['resembles "%s"' % ", ".join(options.library) , 
                   'no difference', 
                   'resembles "%s"' % ", ".join(options.library2)])
#                    0, -1],
#3             aspect=80,
plot.save(libname='%s.%s' % (title1,title2))

 
