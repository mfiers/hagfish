#!/usr/bin/env python
import os
import sys
import math
import pickle
import jinja2

import numpy as np
import matplotlib as mpl
mpl.use('agg')
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import scipy.stats

import logging
import optparse

from hagfish_file_util import *

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')

parser.add_option('-C', dest='coverage_cutoff', type="int",
                  help='coverage cutoff - below this coverage consider the' +
                  'region as having no information', default=10)
parser.add_option('-S', dest='score_cutoff', type="float",
                  help='score cutoff - (score < -S : bad; score > +S : good; ' +
                  'otherwise: uncertain', default=0.5)

options, args = parser.parse_args()

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)

def flat_fish(seqId, seqLen):

    l.info("processing %s (%d nt)" % (seqId, seqLen))

    #read the coverage plots
    file_base = os.path.join('combined', seqId)
        
    r_ok = np_load(file_base, 'r_ok')
    r_high = np_load(file_base, 'r_high')
    r_low = np_load(file_base, 'r_low')

    #r_ok_ends = np_load(file_base, 'r_ok_ends')
    #r_high_ends = np_load(file_base, 'r_high_ends')
    #r_low_ends = np_load(file_base, 'r_low_ends')

    median_ok = np.median(r_ok)
    score = 1 - 2 * np.exp(-1 * (r_ok / median_ok)) \
            + np.exp(-1 * ( ( r_ok + r_low + r_high) / median_ok) ) 

    #smoothen the score a little
    w=np.ones(10, 'd')
    smoscore = np.convolve(w/w.sum(), score, mode='valid')
    
    l.debug("Calculated score: min %s, max %s" % (np.min(score), np.max(score)))

    #categories:
    # no info - c < COVERAGE_CUTOFF
    # bad - s < -0.33
    # uncertain - -0.33 < s < 0.33
    # good - 0.33 < s

    CATEGORIES = {
        0 : 'noinfo',
        1 : 'bad',
        2 : 'uncertain',
        3 : 'good' }
    
    COVERAGE_CUTOFF = options.coverage_cutoff
    SCORE_CUTOFF = options.score_cutoff
    
    r_all = r_ok + r_high + r_low

    def catify(comcov, score):
        if score < -1 * SCORE_CUTOFF:
            return 1
        elif score > SCORE_CUTOFF:
            return 3
        elif comcov < COVERAGE_CUTOFF:
            return 0
        else:
            return 2
        
    vfunc = np.vectorize(catify)
    cats = vfunc(r_all, score)

    i = 0
    lastcat = cats[0]
    lastpos = 0
    
    with open(os.path.join('flat', '%s.flat.gff' % seqId), 'w') as F:
        F.write("##gff-version 3\n")
        F.write("##source-version Hagfish 0.1\n")
        F.write("##sequence-region %s 1 %d\n" % (seqId, seqLen))
                
        def gff_write(cat, sta, sto):
            if cat == 0:
                return
            #SEQ1  EMBL  atg  103  105  .  +  0
            F.write("\t".join(map(str, [
                seqId, 'Hagfish', 'cat_%s' % CATEGORIES[cat],
                sta, sto, '.', '.', '.',
                'ID="Hagfish_cat_%s_%s_%d"' % (seqId, cat, sta)
                ])))
            F.write("\n")
            
        while True:
            if i + 1 == len(cats):
                gff_write(lastcat, lastpos+1, i+1)
                break
            elif cats[i] != lastcat:
                #category switch
                gff_write(lastcat, lastpos+1, i)
                lastcat = cats[i]
                lastpos = i
            i += 1

        

    

if __name__ == '__main__':

    if not os.path.exists('flat'):
        os.makedirs('flat')

    #read an arbitrary seqId file
    for f in os.listdir('seqInfo'):
        if '.seqinfo' in f:
            seqInfoFile = os.path.join('seqInfo', f)
            break
        else:
            l.critical("cannot find a seqInfo file")
            sys.exit(-1)

    l.info("reading %s for seqinfo" % seqInfoFile)
    with open(seqInfoFile) as F:
        seqInfo = pickle.load(F)
        
    l.info("discovered %d sequences" % len(seqInfo))

    if len(args) > 0:
        seqs_to_parse = args
    if len(seqInfo) <= 5000:
        seqs_to_parse = seqInfo.keys()
    else:
        l.info("too many sequences - not making seq reports")
        sys.exit(0)

    seqCount =  0
    for seqId in seqs_to_parse:

        if seqInfo[seqId]['length'] < 10000:
            continue
        
        flat_fish(seqId, seqLen=seqInfo[seqId]['length'])
        
