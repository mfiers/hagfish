#!/usr/bin/env python

import os
import sys
import pickle

import numpy as np

import logging
import optparse

from hagfish_file_util import *

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')

options, args = parser.parse_args()

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)

if __name__ == '__main__':


    #read an arbitrary seqId file
    for f in os.listdir('seqInfo'):
        if '.seqinfo' in f:
            seqInfoFile = os.path.join('seqInfo', f)
            break
        else:
            l.critical("cannot find a seqInfo file")
            sys.exit(-1)

    l.info("reading %s for seqinfo" % seqInfoFile)
    with open(seqInfoFile) as F:
        seqInfo = pickle.load(F)
        
    l.info("discovered %d sequences" % len(seqInfo))

    if not os.path.exists('combined'):
        os.mkdir('combined')

    no_seqs_without_coverage = 0
    for seqId in seqInfo.keys():

        r_ok = None
        r_low = None
        r_high = None
        r_ok_ends = None
        r_low_ends = None
        r_high_ends = None
        r_low_binned = None
        r_high_binned = None
        bins_low = []
        bins_high = []

        for inputDir in os.listdir('coverage'):
            file_base = os.path.join('coverage', inputDir, seqId + '.coverage')
            bamBase = inputDir

            l.debug("processing %s (%s)" % (bamBase, file_base))

            try:
                d_ok = np_load(file_base, 'r_ok')
                d_high = np_load(file_base, 'r_high')
                d_low = np_load(file_base, 'r_low')

                d_ok_ends = np_load(file_base, 'r_ok_ends')
                d_high_ends = np_load(file_base, 'r_high_ends')
                d_low_ends = np_load(file_base, 'r_low_ends')
            except IOError:
                #ignore if we can't load this file...
                #possibly it was empty
                continue

            if r_ok == None:

                r_ok = d_ok
                r_high = d_high
                r_low = d_low
                
                r_ok_ends = d_ok_ends
                r_high_ends = d_high_ends
                r_low_ends = d_low_ends
            else:
                r_ok += d_ok
                r_high += d_high
                r_low += d_low

                r_ok_ends += d_ok_ends
                r_high_ends += d_high_ends
                r_low_ends += d_low_ends

        if r_ok != None:
            l.info("Processed %s ln %d min/max for ok:%d/%d low:%d/%d high: %d/%d" % (
                    bamBase, len(d_ok), max(d_ok), min(d_ok),
                    max(d_low), min(d_low), max(d_high),
                    min(d_high)))
            np_savez(os.path.join('combined', seqId),
                     r_ok = r_ok,
                     r_high = r_high,
                     r_low = r_low,
                     
                     r_ok_ends = r_ok_ends,
                     r_high_ends = r_high_ends,
                     r_low_ends = r_low_ends)
        else:
            l.info("PROBLEM - FOUND NOTHING FOR %s" % bamBase)
            no_seqs_without_coverage += 1

    l.info("ignored %d sequences (no coverage??)" % no_seqs_without_coverage)
