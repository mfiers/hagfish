#!/usr/bin/env python

import os
import sys
import math

import numpy as np
import matplotlib as mpl
mpl.use('agg')
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib as mpl
#import matplotlib.transforms
#import matplotlib.rc as rc
import pylab as pl

import subprocess

from hagfishUtils import *

## Arguments: General options 
parser = getHagfishOptparser()
parser.add_option('-S', dest='score', action='store_true',
                  help='plot the hagfish score' )

addPlotParameters(parser)
options, args = parser.parse_args()

l = getLogger('main', options.verbose)

l.info("starting %s" % sys.argv[0])
    
#load the coverage plots
data = hagfishData(options, args)

#prepare the plot
plot = hagfishPlot(options, data)

PLOTHIGH = True
PLOTOK = True
PLOTLOW = True

class plotter(hagfishPlotBand):
    
    def plotBand(self):
        self.l.debug("Start plotting")
        yc = self.yCorrection

        ## print lightly colored high/low/good
        ## to server a background
        #self.l.debug("Plot background")

        # if PLOTHIGH:
        #     ## bg high
        #     self.ax.fill_between(
        #             self.locx,
        #             self.okh + yc,
        #             self.okh + self.high + yc,
        #             alpha = 1,
        #             zorder = 0,
        #             color=COLOR2)
            
        # if PLOTLOW:
        #     ### bg low
        #     self.ax.fill_between(
        #         self.locx,
        #         -self.okh + yc,
        #         (-self.okh - self.low) + yc,
        #         alpha=1,
        #         color=COLOR3,
        #         zorder=0)

        # if PLOTOK:
        #     ### bg ok
        #     self.ax.fill_between(
        #         self.locx,
        #         -self.okh + yc,
        #         self.okh + yc,
        #         alpha=1,
        #         color=COLOR1,
        #         zorder=0)

        # if PLOTHIGH:
        #     ## outlines
        #     self.ax.plot( 
        #         self.locx, 
        #         self.okh + self.high + yc,
        #         color = 'black', linewidth=0.5,
        #         zorder=0)
        # if PLOTLOW:
        #     self.ax.plot(
        #         self.locx,
        #         -(self.okh + self.low) + yc,
        #         color = 'black',
        #         linewidth=0.5,
        #         zorder=0)

        ## Reprint High/ok/low - now with a cutof to stay
        ## in the band

        if PLOTHIGH:
            #high
            self.ax.fill_between(
                self.locx,
                np.minimum(self.bandTop, self.okh + yc),
                np.minimum(self.bandTop, self.okh + self.high + yc),
                alpha = 0.8,\
                    zorder = 1,
                color=COLOR2)
        
        if PLOTLOW:
            #low
            self.ax.fill_between(
                self.locx,
                np.maximum(self.bandBottom, -self.okh + yc),
                np.maximum(self.bandBottom, (-self.okh - self.low) + yc),
                alpha=0.8,
                color=COLOR3,
                zorder=1)
        
        if PLOTOK:
            #ok
            self.ax.fill_between(
                self.locx,
                np.minimum(self.bandTop, self.okh + yc),
                np.maximum(self.bandBottom, -self.okh + yc),
                alpha=0.8,
                color=COLOR1,
                zorder=1)

        # self.ax.fill_between(
        #     self.locx,
        #     self.okh_ends + yc,
        #     -self.okh_ends + yc,
        #     alpha=0.3,
        #     color=COLOR4,
        #     zorder=2)

        # self.ax.fill_between(self.locx, 
        #                      self.okh + self.high + yc, 
        #                      self.okh + self.high + self.high_ends + yc, 
        #                      color=COLOR4, 
        #                      linewidth=1, 
        #                      zorder=4)

        # self.ax.fill_between(self.locx, 
        #                      -self.okh - self.low + yc, 
        #                      -self.okh - self.low - self.low_ends + yc, 
        #                      color=COLOR4, 
        #                      linewidth=1, 
        #                      zorder=4)
        #self.ax.plot(self.locx, -self.low_ends + yc, color=COLOR3, 
        #             linewidth=0.5, zorder=12, alpha=0.5)
        # self.ax.fill_between(
        #      self.locx,
        #      self.okh_ends + yc,
        #      self.okh_ends + self.high_ends + yc,
        #      alpha=0.3,
        #      color='black',
        #      zorder=2)

        #plot new outlines
        #filter them, so that we only have outlines where the
        #plot remains inside the band                
        
        if PLOTHIGH:
            self.ax.plot(
                self.locx,
                self.okh + self.high + yc,
                color = 'black', linewidth = 0.5,
                zorder =5,
                clip_path=self.patch
                )

        if PLOTOK:        
            self.ax.plot(
                self.locx,
                self.okh + yc,
                color = 'black', linewidth = 0.5,
                zorder =5,
                clip_path=self.patch
                )

            self.ax.plot(
                self.locx,
                -self.okh + yc,
                color = 'black',
                linewidth=0.5,
                clip_path=self.patch,
                zorder=5)

        if PLOTLOW:
            self.ax.plot(
                 self.locx,
                 -(self.okh + self.low) + yc,
                 color = 'black',
                 linewidth=0.5,
                 clip_path=self.patch,
                 zorder=5)


        if options.score:
            score = self.data.medianH * (
                1 - 2 * np.exp(-1 * (self.ok / self.data.median))
                + np.exp(-1 * ( ( self.ok + self.low + self.high) / self.data.median))
                )
            l.debug("Plotting score: min %s, max %s" % (np.min(score), np.max(score)))

            self.ax.plot(self.locx, score + yc, color='black', linewidth=3)

        
    def setYticks2(self):
        
        self.plot.yTicks2.append(self.yCorrection - self.data.medianH)
        self.plot.yTicks2.append(self.yCorrection)
        self.plot.yTicks2.append(self.yCorrection + self.data.medianH)
        self.plot.yTickLabels2.append("%s" % -self.data.medianH)
        self.plot.yTickLabels2.append("0")
        self.plot.yTickLabels2.append("%s" % self.data.medianH)
        self.ax.axhline(
            self.yCorrection - self.data.medianH,
            alpha=0.3,
            color='black')
        self.ax.axhline(
            self.yCorrection + self.data.medianH,
            alpha=0.3,
            color='black')
        
plot.plotBands(plotter)
plot.save(tag='cbin')

 
