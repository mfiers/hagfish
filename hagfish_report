#!/usr/bin/env python
import os
import sys
import math
import pickle

import numpy as np
import matplotlib as mpl
mpl.use('agg')
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab

import logging
import optparse

## Arguments: General options 
parser = optparse.OptionParser()
parser.add_option('-v', dest='verbose', action="count", 
                  help='Show debug information')

options, args = parser.parse_args()

l = logging.getLogger('hagfish')
handler = logging.StreamHandler()
logmark = chr(27) + '[0;37;44mHAGFISH' + \
          chr(27) + '[0m ' 

formatter = logging.Formatter(
    logmark + '%(levelname)-6s %(message)s')

handler.setFormatter(formatter)
l.addHandler(handler)

if options.verbose >= 2:
    l.setLevel(logging.DEBUG)
elif options.verbose == 1:
    l.setLevel(logging.INFO)
else:
    l.setLevel(logging.WARNING)


if __name__ == '__main__':

    if not os.path.exists('report'):
        os.makedirs('report')

    #read an arbitrary seqId file
    for f in os.listdir('seqInfo'):
        if '.seqinfo' in f:
            seqInfoFile = os.path.join('seqInfo', f)
            break
        else:
            l.critical("cannot find a seqInfo file")
            sys.exit(-1)

    l.info("reading %s for seqinfo" % seqInfoFile)
    with open(seqInfoFile) as F:
        seqInfo = pickle.load(F)
        
    l.info("discovered %d sequences" % len(seqInfo))

    if len(seqInfo) > 18:
        l.info("too many sequences - not making seq reports")
        sys.exit(0)

    seqCount =  0
    for seqId in seqInfo.keys():

        seqCount += 1
        seqLen = seqInfo[seqId]['length']
        l.info("processing %s (%d nt)" % (seqId, seqLen))

        #read the coverage plots
        inputFile = os.path.join('combined', seqId + '.combined.coverage.npz')
        data = np.load(inputFile)
        r_ok = data['r_ok']
        r_high = data['r_high']
        r_low = data['r_low']


        if seqCount == 1:
            #determine what the bins are
            maxx = max(max(r_ok), max(r_high), max(r_low))
            maxx = 1500 * ( ( maxx / 1000 ) + 1 )             
            bins =  np.array([0,1,2,3,4] + range(5, maxx))

        oh, oe = np.histogram(r_ok, bins = bins)
        hh, he = np.histogram(r_high, bins = bins)
        lh, le = np.histogram(r_low, bins = bins)

        #we don't want to see the number of nt that have no
        # high or low coverage..
        hh[0] = 0
        lh[0] = 0
        
        #bin the coverage graph
        bins =  np.array([1,2,3,4] + range(5, maxx))
        #bins = np.array([0,1,2,3,4,5,6,7,8] +  range(3, int(math.sqrt(maxx))+1))
        #print bins
        oh, oe = np.histogram(r_ok, bins = bins)
        hh, he = np.histogram(r_high, bins = bins)
        lh, le = np.histogram(r_low, bins = bins)
        mids = 0.5 * (oe[:-1] + oe[1:])

        #print normal plot
        fig = plt.figure()                
        ax = fig.add_subplot(111)
        plt.title('Coverage distribution for sequence "%s"' % seqId,
                  fontdict={'size' : 10})
        ax.set_xlabel('coverage')
        ax.set_ylabel('no nucleotides with coverage')        

        ax.plot((he[:-1]), (hh), c='#B73147',
                 label="long insert")
        ax.plot((oe[:-1]), (oh), c='#3BB058',
                label="correct insert")
        ax.plot((le[:-1]), (lh), c='#538ABF',
                label="short insert")
        
        minX, maxX = ax.get_axes().get_xlim()
        if minX < 1: minX = 1
        
        ax.hlines(seqLen, minX, maxX, linestyles='solid',
                  linewidth=1, colors="black",
                  label='Sequence length (%d)' % seqLen)
        ax.legend(prop={'size' :'x-small'})
        
        plt.savefig(os.path.join(seqId + '.coverage.distrib.png'))

        ax.set_yscale('log')
        ax.hlines(seqLen, minX, maxX, linestyles='solid',
                  linewidth=1, colors="black",
                  label='Sequence length (%d)' % seqLen)

        plt.savefig(os.path.join(seqId + '.coverage.distrib.log.png'))

        ax.set_yscale('log')        
        ax.set_xscale('log')
        ax.hlines(seqLen, minX, maxX, linestyles='solid',
                  linewidth=1, colors="black",
                  label='Sequence length (%d)' % seqLen)
        plt.savefig(os.path.join(seqId + '.coverage.distrib.log2.png'))

        fig = plt.figure()                
        ax = fig.add_subplot(111)
        plt.title('Coverage distribution for sequence "%s"' % seqId,
                  fontdict={'size' : 10})
        ax.set_xlabel('coverage')
        ax.set_ylabel('no nucleotides with coverage')        

        ones = np.zeros_like(oh) + 1

        ax.fill_between(
            oe[:-1],
            ones,
            lh+oh+hh,
            where=(lh + oh + hh)>0,
            linewidth=0.5,
            facecolor="#B73147",
            edgecolor="#54121D"
            )

        ax.fill_between(
            oe[:-1],
            ones,
            lh+oh,
            where=(lh+oh)>0,
            linewidth=0.5,
            facecolor="#3BB058",
            edgecolor="#1A612C"
            )

        ax.fill_between(
            oe[:-1],
            ones,
            lh,
            where=lh>0,
            linewidth=0.5,
            facecolor="#538ABF",
            edgecolor="#214262"
            
            )

        minX, maxX = ax.get_axes().get_xlim()
        if minX < 1: minX = 1
        
        ax.hlines(seqLen, minX, maxX, linestyles='solid',
                  linewidth=1, colors="black",
                  label='Sequence length (%d)' % seqLen)
        ax.legend(prop={'size' :'x-small'})
        plt.savefig(os.path.join(seqId + '.cumul.coverage.distrib.png'))

        ax.set_yscale('log')        
        plt.savefig(os.path.join(seqId + '.cumul.coverage.distrib.log.png'))

        ax.set_yscale('log')        
        ax.set_xscale('log')
        plt.savefig(os.path.join(seqId + '.cumul.coverage.distrib.log2.png'))

